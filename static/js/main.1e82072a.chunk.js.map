{"version":3,"sources":["components/FeedbackOptions.jsx","components/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","type","className","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","handleFeedback","setState","prevState","countTotalFeedback","Object","values","reduce","val","countPositiveFeedbackPercentage","Math","round","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAEMA,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtBD,EAAQE,KAAI,SAAAC,GAAI,OACd,wBAEEC,UAAWD,EACXA,KAAK,SACLE,QAAS,kBAAMJ,EAAgBE,IAJjC,SAMGA,GALIA,OCHLG,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,yCAAYJ,KACZ,4CAAeC,KACf,wCAAWC,KACX,0CAAaC,KACb,sDAAyBC,EAAzB,WCNEC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCHCC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,+BAAOA,KCIvCC,E,4MACJC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,eAAiB,SAAAhB,GACf,EAAKiB,UAAS,SAAAC,GAAS,sBAAQlB,EAAOkB,EAAUlB,GAAQ,O,EAG1DmB,mBAAqB,kBACnBC,OAAOC,OAAO,EAAKN,OAAOO,QAAO,SAACf,EAAOgB,GAAR,OAAgBhB,EAAQgB,M,EAE3DC,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKX,MAAMX,KAAO,EAAKe,qBAAwB,MAAQ,G,4CAErE,WACE,OACE,qCACE,cAAC,EAAD,CAAST,MAAM,6BAAf,SACE,cAAC,EAAD,CACEb,QAASuB,OAAOO,KAAKC,KAAKb,OAC1BjB,gBAAiB8B,KAAKZ,mBAIzBY,KAAKT,qBACJ,cAAC,EAAD,CAAST,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMwB,KAAKb,MAAMX,KACjBC,QAASuB,KAAKb,MAAMV,QACpBC,IAAKsB,KAAKb,MAAMT,IAChBC,MAAOqB,KAAKT,qBACZX,mBAAoBoB,KAAKJ,sCAI7B,cAAC,EAAD,CAAcX,QAAQ,6B,GAtCdgB,aA6CHf,I,YC7CfgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1e82072a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>\n  options.map(type => (\n    <button\n      key={type}\n      className={type}\n      type='button'\n      onClick={() => onLeaveFeedback(type)}\n    >\n      {type}\n    </button>\n  ));\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport { FeedbackOptions };\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <div>Good: {good}</div>\n    <div>Neutral: {neutral}</div>\n    <div>Bad: {bad}</div>\n    <div>Total: {total}</div>\n    <div>Positive feedback: {positivePercentage}%</div>\n  </div>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport { Statistics };\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport { Section };\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <span>{message}</span>;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport { Notification };\n","import { Component } from 'react';\nimport { FeedbackOptions } from './components/FeedbackOptions';\nimport { Statistics } from './components/Statistics';\nimport { Section } from './components/Section/Section';\nimport { Notification } from './components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = type => {\n    this.setState(prevState => ({ [type]: prevState[type] + 1 }));\n  };\n\n  countTotalFeedback = () =>\n    Object.values(this.state).reduce((total, val) => total + val);\n\n  countPositiveFeedbackPercentage = () =>\n    Math.round((this.state.good / this.countTotalFeedback()) * 100) || 0;\n\n  render() {\n    return (\n      <>\n        <Section title='Please leave your feedback'>\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n\n        {this.countTotalFeedback() ? (\n          <Section title='Statistics'>\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message='No feedback given'></Notification>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}