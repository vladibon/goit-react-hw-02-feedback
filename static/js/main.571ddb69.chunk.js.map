{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","type","className","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","handleFeedback","setState","prevState","countTotalFeedback","Object","values","reduce","val","countPositiveFeedbackPercentage","Math","round","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAEMA,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACGD,GAAS,6BAAKA,IACdC,MCHCC,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtBD,EAAQE,KAAI,SAAAC,GAAI,OACd,wBAEEC,UAAWD,EACXA,KAAK,SACLE,QAAS,kBAAMJ,EAAgBE,IAJjC,SAMGA,GALIA,OCHLG,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,qCACE,kCACE,gCACE,+BACE,sCACA,yCACA,qCACA,4CAGJ,gCACE,+BACE,6BAAKJ,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,YAKX,oDACA,8BACE,iCAAOC,EAAP,aCvBAC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,8BAAMA,KCItCC,E,4MACJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,eAAiB,SAAAb,GACf,EAAKc,UAAS,SAAAC,GAAS,sBAAQf,EAAOe,EAAUf,GAAQ,O,EAG1DgB,mBAAqB,kBACnBC,OAAOC,OAAO,EAAKN,OAAOO,QAAO,SAACZ,EAAOa,GAAR,OAAgBb,EAAQa,M,EAE3DC,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKX,MAAMR,KAAO,EAAKY,qBAAwB,MAAQ,G,4CAErE,WACE,OACE,qCACE,cAAC,EAAD,CAAStB,MAAM,6BAAf,SACE,cAAC,EAAD,CACEG,QAASoB,OAAOO,KAAKC,KAAKb,OAC1Bd,gBAAiB2B,KAAKZ,mBAIzBY,KAAKT,qBACJ,cAAC,EAAD,CAAStB,MAAM,aAAf,SACE,cAAC,EAAD,CACEU,KAAMqB,KAAKb,MAAMR,KACjBC,QAASoB,KAAKb,MAAMP,QACpBC,IAAKmB,KAAKb,MAAMN,IAChBC,MAAOkB,KAAKT,qBACZR,mBAAoBiB,KAAKJ,sCAI7B,cAAC,EAAD,CAAcX,QAAQ,6B,GAtCdgB,aA6CHf,I,YC7CfgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.571ddb69.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section>\n    {title && <h2>{title}</h2>}\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport { Section };\n","import PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>\n  options.map(type => (\n    <button\n      key={type}\n      className={type}\n      type='button'\n      onClick={() => onLeaveFeedback(type)}\n    >\n      {type}\n    </button>\n  ));\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport { FeedbackOptions };\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <table>\n      <thead>\n        <tr>\n          <th>Good</th>\n          <th>Neutral</th>\n          <th>Bad</th>\n          <th>Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{good}</td>\n          <td>{neutral}</td>\n          <td>{bad}</td>\n          <td>{total}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <h3>Positive feedback:</h3>\n    <div>\n      <span>{positivePercentage}%</span>\n    </div>\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport { Statistics };\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <div>{message}</div>;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport { Notification };\n","import { Component } from 'react';\nimport { Section } from './components/Section/Section';\nimport { FeedbackOptions } from './components/FeedbackOptions/FeedbackOptions';\nimport { Statistics } from './components/Statistics/Statistics';\nimport { Notification } from './components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = type => {\n    this.setState(prevState => ({ [type]: prevState[type] + 1 }));\n  };\n\n  countTotalFeedback = () =>\n    Object.values(this.state).reduce((total, val) => total + val);\n\n  countPositiveFeedbackPercentage = () =>\n    Math.round((this.state.good / this.countTotalFeedback()) * 100) || 0;\n\n  render() {\n    return (\n      <>\n        <Section title='Please leave your feedback'>\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n\n        {this.countTotalFeedback() ? (\n          <Section title='Statistics'>\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message='No feedback given'></Notification>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}